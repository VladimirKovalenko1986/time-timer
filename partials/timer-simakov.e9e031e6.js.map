{"mappings":"AA2DS,MAAHA,EAAO,CACXC,OAAQC,SAASC,eAAe,QAChCC,UAAWF,SAASC,eAAe,WACnCE,SAAUH,SAASC,eAAe,gBA2DpC,MAAMG,EAAQ,IAxDd,MASEC,OACEC,KAAKC,QAAUC,aAAY,IAAMF,KAAKG,qBAAqB,I,CAG7DA,oBACE,MAAMC,EAAMC,KAAKD,MACXE,EAAON,KAAKO,YAAcH,EAEhCI,EADaR,KAAKS,iBAAiBH,IAG/BA,GAAQ,IACVI,eACAlB,EAAKC,OAAOkB,YAAc,qB,CAI9BD,eACEE,cAAcZ,KAAKC,SACnBT,EAAKK,SAASgB,UAAW,EACzBrB,EAAKI,UAAUiB,UAAW,EAC1BC,QAAQC,IAAI,sB,CAGdC,mBACEhB,KAAKC,QAAUC,aAAY,IAAMF,KAAKG,qBAAqB,KAK3DX,EAAKK,SAASgB,UAAW,EACzBrB,EAAKI,UAAUiB,UAAW,C,CAG5BJ,iBAAiBQ,GAMf,MAAO,C,KALMjB,KAAKkB,IAAIC,KAAKC,MAAMH,EAAQ,Q,MAC3BjB,KAAKkB,IAAIC,KAAKC,MAAMH,EAAS,KAAmB,K,QAC9CjB,KAAKkB,IAAIC,KAAKC,MAAMH,EAAS,IAAc,K,QAC3CjB,KAAKkB,IAAIC,KAAKC,MAAMH,EAAQ,IAAQ,K,CAKtDC,IAAIG,GACF,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,CAnDnCC,aAAYC,OAAEA,IACZzB,KAAKC,QAAU,KACfD,KAAK0B,UAAW,EAChB1B,KAAKO,YAAc,IAAIF,KAAK,WAAU,IAAIA,MAAOsB,cAAgB,KACjE3B,KAAKyB,OAASA,EAEdzB,KAAKD,M,GAiDe,CAAE0B,OAAQjB,IAKlC,SAASA,GAAgBoB,KAAEA,EAAIC,MAAEA,EAAKC,QAAEA,EAAOC,QAAEA,IAC/CvC,EAAKC,OAAOkB,YAAc,GAAGiB,QAAWC,QAAYC,QAAcC,M,CAJpEvC,EAAKI,UAAUoC,iBAAiB,QAASlC,EAAMY,aAAauB,KAAKnC,IACjEN,EAAKK,SAASmC,iBAAiB,QAASlC,EAAMkB,iBAAiBiB,KAAKnC","sources":["src/js/timer-simakov.js"],"sourcesContent":["// const refs = {\n//   timeEl: document.getElementById('time'),\n//   stopBtnEL: document.getElementById('stopBtn'),\n//   startBtn: document.getElementById('continueBtn'),\n// };\n\n// const newYearDate = new Date(`Jan 1, ${new Date().getFullYear() + 1}`);\n// let timerId = null;\n// const isActive = false;\n\n// refs.stopBtnEL.addEventListener('click', stopInterval);\n// refs.startBtn.addEventListener('click', coontinueInterval);\n\n// timerId = setInterval(countDownTimeToNY, 1000);\n\n// function countDownTimeToNY() {\n//   const now = Date.now();\n//   const diff = newYearDate - now;\n//   const time = getTimeComponets(diff);\n//   updateClockYext(time);\n\n//   if (diff <= 0) {\n//     stopInterval();\n//     refs.timeEl.textContent = 'Happy New Year!!!!';\n//   }\n// }\n\n// function stopInterval() {\n//   clearInterval(timerId);\n//   refs.startBtn.disabled = false;\n//   refs.stopBtnEL.disabled = true;\n//   console.log('Таймер зупинено!!!!');\n// }\n\n// function coontinueInterval() {\n//   timerId = setInterval(countDownTimeToNY, 1000);\n//   refs.startBtn.disabled = true;\n//   refs.stopBtnEL.disabled = false;\n// }\n\n// function getTimeComponets(time) {\n//   const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n//   const hours = pad(Math.floor((time / (1000 * 60 * 60)) % 24));\n//   const minutes = pad(Math.floor((time / (1000 * 60)) % 60));\n//   const seconds = pad(Math.floor((time / 1000) % 60));\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// function updateClockYext({ days, hours, minutes, seconds }) {\n//   refs.timeEl.textContent = `${days} d. ${hours} h. ${minutes} m. ${seconds} s.`;\n// }\n\n// function pad(value) {\n//   return String(value).padStart(2, '0');\n// }\n\n// !!!!!! Через клас!!!!! !!!!!\n\nconst refs = {\n  timeEl: document.getElementById('time'),\n  stopBtnEL: document.getElementById('stopBtn'),\n  startBtn: document.getElementById('continueBtn'),\n};\n\nclass Timer {\n  constructor({ onTick }) {\n    this.timerId = null;\n    this.isActive = false;\n    this.newYearDate = new Date(`Jan 1, ${new Date().getFullYear() + 1}`);\n    this.onTick = onTick;\n\n    this.init();\n  }\n  init() {\n    this.timerId = setInterval(() => this.countDownTimeToNY(), 1000);\n  }\n\n  countDownTimeToNY() {\n    const now = Date.now();\n    const diff = this.newYearDate - now;\n    const time = this.getTimeComponets(diff);\n    updateClockYext(time);\n\n    if (diff <= 0) {\n      stopInterval();\n      refs.timeEl.textContent = 'Happy New Year!!!!';\n    }\n  }\n\n  stopInterval() {\n    clearInterval(this.timerId);\n    refs.startBtn.disabled = false;\n    refs.stopBtnEL.disabled = true;\n    console.log('Таймер зупинено!!!!');\n  }\n\n  continueInterval() {\n    this.timerId = setInterval(() => this.countDownTimeToNY(), 1000);\n\n    // +++++ Через bind ++++\n    // this.timerId = setInterval(this.countDownTimeToNY.bind(this), 1000);\n\n    refs.startBtn.disabled = true;\n    refs.stopBtnEL.disabled = false;\n  }\n\n  getTimeComponets(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time / (1000 * 60 * 60)) % 24));\n    const minutes = this.pad(Math.floor((time / (1000 * 60)) % 60));\n    const seconds = this.pad(Math.floor((time / 1000) % 60));\n\n    return { days, hours, minutes, seconds };\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst timer = new Timer({ onTick: updateClockYext });\n\nrefs.stopBtnEL.addEventListener('click', timer.stopInterval.bind(timer));\nrefs.startBtn.addEventListener('click', timer.continueInterval.bind(timer));\n\nfunction updateClockYext({ days, hours, minutes, seconds }) {\n  refs.timeEl.textContent = `${days} d. ${hours} h. ${minutes} m. ${seconds} s.`;\n}\n"],"names":["$0f58288392cca0cc$var$refs","timeEl","document","getElementById","stopBtnEL","startBtn","$0f58288392cca0cc$var$timer","init","this","timerId","setInterval","countDownTimeToNY","now","Date","diff","newYearDate","$0f58288392cca0cc$var$updateClockYext","getTimeComponets","stopInterval","textContent","clearInterval","disabled","console","log","continueInterval","time","pad","Math","floor","value","String","padStart","constructor","onTick","isActive","getFullYear","days","hours","minutes","seconds","addEventListener","bind"],"version":3,"file":"timer-simakov.e9e031e6.js.map"}