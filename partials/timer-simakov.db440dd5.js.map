{"mappings":"sEACAA,OAAOC,eAAeC,EAAS,aAAc,CACzCC,OAAO,IAEXD,EAAQE,QACR,SAAyBC,EAAUC,GAC/B,KAAMD,aAAoBC,GACtB,MAAM,IAAIC,UAAU,oC,WCG5B,SAASC,EAAkBC,EAAQC,GAC/B,IAAI,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAI,CACjC,IAAIE,EAAaH,EAAMC,GACvBE,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDhB,OAAOC,eAAeQ,EAAQI,EAAWI,IAAKJ,E,EAftDb,OAAOC,eAAeiB,EAAS,aAAc,CACzCf,OAAO,IAEXe,EAAQd,QACR,SAAsBE,EAAaa,EAAYC,GACvCD,GAAYX,EAAkBF,EAAYe,UAAWF,GACrDC,GAAaZ,EAAkBF,EAAac,GAChD,OAAOd,C,ECmDX,IAAMgB,EAAO,CACXC,OAAQC,SAASC,eAAe,QAChCC,UAAWF,SAASC,eAAe,WACnCE,SAAUH,SAASC,eAAe,gBA2D9BG,EAAQ,IAAX,W,sBAxDGC,EACQC,G,IAAAC,EAAAD,EAAEC,O,aACZC,KAAKC,QAAU,KACfD,KAAKE,UAAW,EAChBF,KAAKG,YAAc,IAAIC,KAAK,UAAuCC,QAA7B,IAAID,MAAOE,cAAgB,IACjEN,KAAKD,OAASA,EAEdC,KAAKO,M,iBAEPtB,IAAA,O,MAAA,W,WACEe,KAAKC,QAAUO,aAAY,W,OAAMC,EAAKC,mB,GAAqB,I,IAG7DzB,IAAA,oB,MAAA,WACE,IAAM0B,EAAMP,KAAKO,MACXC,EAAOZ,KAAKG,YAAcQ,EAC1BE,EAAOb,KAAKc,iBAAiBF,GACnCZ,KAAKD,OAAOc,GAERD,GAAQ,IACVG,eACAzB,EAAKC,OAAOyB,YAAc,qB,IAI9B/B,IAAA,e,MAAA,WACEgC,cAAcjB,KAAKC,SACnBX,EAAKK,SAASuB,UAAW,EACzB5B,EAAKI,UAAUwB,UAAW,EAC1BC,QAAQC,IAAI,sB,IAGdnC,IAAA,mB,MAAA,W,WACEe,KAAKC,QAAUO,aAAY,W,OAAMC,EAAKC,mB,GAAqB,KAK3DpB,EAAKK,SAASuB,UAAW,EACzB5B,EAAKI,UAAUwB,UAAW,C,IAG5BjC,IAAA,mB,MAAA,SAAiB4B,GAMf,MAAO,CAAEQ,KALIrB,KAAKsB,IAAIC,KAAKC,MAAMX,EAAQ,QAK1BY,MAJDzB,KAAKsB,IAAIC,KAAKC,MAAMX,EAAS,KAAmB,KAIxCa,QAHN1B,KAAKsB,IAAIC,KAAKC,MAAMX,EAAS,IAAc,KAG5Bc,QAFf3B,KAAKsB,IAAIC,KAAKC,MAAMX,EAAQ,IAAQ,K,IAKtD5B,IAAA,M,MAAA,SAAId,GACF,OAAOyD,OAAOzD,GAAO0D,SAAS,EAAG,I,OAIlC,GAAW,CAAU,CAAE9B,OAK1B,SAAyBD,G,IAAEuB,EAAFvB,EAAEuB,KAAMI,EAAR3B,EAAQ2B,MAAOC,EAAf5B,EAAe4B,QAASC,EAAxB7B,EAAwB6B,QAC/CrC,EAAKC,OAAOyB,YAAc,GAAcX,OAAXgB,EAAK,QAAkBhB,OAAZoB,EAAM,QAAoBpB,OAAdqB,EAAQ,QAAcrB,OAARsB,EAAQ,M,IAJ5ErC,EAAKI,UAAUoC,iBAAiB,QAASlC,EAAMmB,aAAagB,KAAKnC,IACjEN,EAAKK,SAASmC,iBAAiB,QAASlC,EAAMoC,iBAAiBD,KAAKnC,G","sources":["node_modules/@swc/helpers/lib/_class_call_check.js","node_modules/@swc/helpers/lib/_create_class.js","src/js/timer-simakov.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classCallCheck;\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _createClass;\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\n","// const refs = {\n//   timeEl: document.getElementById('time'),\n//   stopBtnEL: document.getElementById('stopBtn'),\n//   startBtn: document.getElementById('continueBtn'),\n// };\n\n// const newYearDate = new Date(`Jan 1, ${new Date().getFullYear() + 1}`);\n// let timerId = null;\n// const isActive = false;\n\n// refs.stopBtnEL.addEventListener('click', stopInterval);\n// refs.startBtn.addEventListener('click', coontinueInterval);\n\n// timerId = setInterval(countDownTimeToNY, 1000);\n\n// function countDownTimeToNY() {\n//   const now = Date.now();\n//   const diff = newYearDate - now;\n//   const time = getTimeComponets(diff);\n//   updateClockYext(time);\n\n//   if (diff <= 0) {\n//     stopInterval();\n//     refs.timeEl.textContent = 'Happy New Year!!!!';\n//   }\n// }\n\n// function stopInterval() {\n//   clearInterval(timerId);\n//   refs.startBtn.disabled = false;\n//   refs.stopBtnEL.disabled = true;\n//   console.log('Таймер зупинено!!!!');\n// }\n\n// function coontinueInterval() {\n//   timerId = setInterval(countDownTimeToNY, 1000);\n//   refs.startBtn.disabled = true;\n//   refs.stopBtnEL.disabled = false;\n// }\n\n// function getTimeComponets(time) {\n//   const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n//   const hours = pad(Math.floor((time / (1000 * 60 * 60)) % 24));\n//   const minutes = pad(Math.floor((time / (1000 * 60)) % 60));\n//   const seconds = pad(Math.floor((time / 1000) % 60));\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// function updateClockYext({ days, hours, minutes, seconds }) {\n//   refs.timeEl.textContent = `${days} d. ${hours} h. ${minutes} m. ${seconds} s.`;\n// }\n\n// function pad(value) {\n//   return String(value).padStart(2, '0');\n// }\n\n// !!!!!! Через клас!!!!! !!!!!\n\nconst refs = {\n  timeEl: document.getElementById('time'),\n  stopBtnEL: document.getElementById('stopBtn'),\n  startBtn: document.getElementById('continueBtn'),\n};\n\nclass Timer {\n  constructor({ onTick }) {\n    this.timerId = null;\n    this.isActive = false;\n    this.newYearDate = new Date(`Jan 1, ${new Date().getFullYear() + 1}`);\n    this.onTick = onTick;\n\n    this.init();\n  }\n  init() {\n    this.timerId = setInterval(() => this.countDownTimeToNY(), 1000);\n  }\n\n  countDownTimeToNY() {\n    const now = Date.now();\n    const diff = this.newYearDate - now;\n    const time = this.getTimeComponets(diff);\n    this.onTick(time);\n\n    if (diff <= 0) {\n      stopInterval();\n      refs.timeEl.textContent = 'Happy New Year!!!!';\n    }\n  }\n\n  stopInterval() {\n    clearInterval(this.timerId);\n    refs.startBtn.disabled = false;\n    refs.stopBtnEL.disabled = true;\n    console.log('Таймер зупинено!!!!');\n  }\n\n  continueInterval() {\n    this.timerId = setInterval(() => this.countDownTimeToNY(), 1000);\n\n    // +++++ Через bind ++++\n    // this.timerId = setInterval(this.countDownTimeToNY.bind(this), 1000);\n\n    refs.startBtn.disabled = true;\n    refs.stopBtnEL.disabled = false;\n  }\n\n  getTimeComponets(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time / (1000 * 60 * 60)) % 24));\n    const minutes = this.pad(Math.floor((time / (1000 * 60)) % 60));\n    const seconds = this.pad(Math.floor((time / 1000) % 60));\n\n    return { days, hours, minutes, seconds };\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst timer = new Timer({ onTick: updateClockYext });\n\nrefs.stopBtnEL.addEventListener('click', timer.stopInterval.bind(timer));\nrefs.startBtn.addEventListener('click', timer.continueInterval.bind(timer));\n\nfunction updateClockYext({ days, hours, minutes, seconds }) {\n  refs.timeEl.textContent = `${days} d. ${hours} h. ${minutes} m. ${seconds} s.`;\n}\n"],"names":["Object","defineProperty","$665014edacbfe17b$exports","value","default","instance","Constructor","TypeError","$74e7f8130373505f$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","$74e7f8130373505f$exports","protoProps","staticProps","prototype","$f61c6f86e83277ee$var$refs","timeEl","document","getElementById","stopBtnEL","startBtn","$f61c6f86e83277ee$var$timer","Timer","param","onTick","this","timerId","isActive","newYearDate","Date","concat","getFullYear","init","setInterval","_this","countDownTimeToNY","now","diff","time","getTimeComponets","stopInterval","textContent","clearInterval","disabled","console","log","days","pad","Math","floor","hours","minutes","seconds","String","padStart","addEventListener","bind","continueInterval"],"version":3,"file":"timer-simakov.db440dd5.js.map"}